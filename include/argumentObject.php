<?php
/*
 Copyright (C) 2013-2014 ClÃ©ment Roblot

This file is part of lamadmin.

Lamadmin is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Lamadmin is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Lamadmin.  If not, see <http://www.gnu.org/licenses/>.
*/

require_once("FirePHPCore/FirePHP.class.php");





/** \brief All the arguments usable in the modules and submodules are inheriting from this class.
  *
  * This object is abstract, it will never be instanciated as such.
  */
abstract class Argument{

  protected $type;  /**< The type of this argument */
  protected $name;  /**< The name of this argument */

  /** \brief Function returning the current argument as an html form.
    *
    * \return The form input corresponding to this argument, as a string.
  */
  abstract protected function toForm();

  /** \brief Function returning the current argument as JSON.
    *
    * \return The argument as a JSON string.
  */
  abstract protected function toJson();

  /** \brief Function returning a JSON template with all the field empty.
    *
    * \return The argument as a JSON string without any values in it.
  */
  abstract protected function getEmptyTemplate();

  /** \brief Function returning this argument to be written into the Rexify file.
    *
    * \return The argument as a string ready for rex.
  */
  abstract protected function toConfigFile();

  /** \brief Function returning this argument to be written into the Rexify file.
    *
    * \return The argument as a string ready for rex.
  */
  abstract protected function toConfigFileArg();

  /** \brief Function returning this argument value to be written into the Rexify file (called by toConfigFile).
    *
    * \return The argument value as a string ready to be included into the argument string for rex (generated by the function toConfigFile).
  */
  public function getType(){return $this->type;}


  /** \brief Function returning the name of the current argument
    *
    * \return The name of the current argument as a string.
  */
  public function getName(){return $this->name;}
}











/**
 * \brief Object used to specify a string argument.
 * 
 * Object used to specify an argument of a module or submodule
 * that is a string.
 */
class StringArg extends Argument{

  private $value;
  
  /** \brief Constructor of the StringArg object.
    *
    * \param $name The name of this argument (as a string).
    * \param $value The value of this argument (as a string).
    * \return The form input corresponding to this argument, as a string.
  */
  function __construct($name, $value){
  
    $this->type = "string";
    $this->name = $name;
    $this->value = $value;
  }
  
  /** \brief Function returning the current argument as an html form.
    *
    * \return The form input corresponding to this argument, as a string.
  */
  public function toForm(){
      
    return "<input type=\"text\" name=\"".$this->name."\" value=\"".$this->value."\"/>";
  }

  /** \brief Function returning the current argument as JSON.
    *
    * \return The argument as a JSON string.
  */
	public function toJson(){

		return "{\"content_type\" : \"string\", \"title\" : \"".$this->name."\", \"value\" : \"".$this->value."\"}";
	}
    
  /** \brief Function returning a JSON template with all the field empty.
    *
    * \return The argument as a JSON string without any values in it.
  */
	public function getEmptyTemplate(){

		return "{\"content_type\" : \"string\", \"title\" : \"\", \"value\" : \"\"}";
	}

  /** \brief Function returning this argument to be written into the Rexify file.
    *
    * \return The argument as a string ready for rex.
  */
  public function toConfigFile(){
      
    return "'".$this->name."' => ".$this->toConfigFileArg().",";
  }
  
  /** \brief Function returning this argument to be written into the Rexify file.
    *
    * \return The argument as a string ready for rex.
  */
  public function toConfigFileArg(){
      
    return "'".$this->value."'";
  }
  
  /** \brief Function returning the name of the current argument
    *
    * \return The name of the current argument as a string.
  */
  public function getName(){return $this->name;}
  /** \brief Function setting the name of the current argument
    *
    * \param $name The new name of the current argument as a string.
  */
  public function setName($name){$this->name = $name;}
  /** \brief Function returning the value of the current argument
    *
    * \return The value of the current argument as a string.
  */
  public function getValue(){return $this->value;}
  /** \brief Function setting the value of the current argument
    *
    * \param $value The new value of the current argument as a string.
  */
  public function setValue($value){$this->value = $value;}
}










/**
 * \brief Object used to specify order between instances of modules and submodules.
 * 
 * Object used to specify the fact that a module or submodule must be instanciated after an other.
 * This argument should be usable with every modules and submodules without having to specify it 
 * in it's configuration file
 */
class AfterArg extends Argument{

  private $value;
  
  /** \brief Contructor of the object.
    *
    * \param $value The object after wich we want to be, as a string.
  */
  function __construct($value){
  
    $this->type = "after";
    $this->name = "after";
    $this->value = $value;
  }
  
  
  /** \brief Function returning the current argument as an html form.
    *
    * \return The form input corresponding to this argument, as a string.
  */
  public function toForm(){
      
    return "<input type=\"text\" class=\"instanceMenu\" name=\"".$this->name."\" value=\"".$this->value."\"/>";
  }

  /** \brief Function returning the current argument as JSON.
    *
    * \return The argument as a JSON string.
  */
  public function toJson(){

    return "{\"content_type\" : \"after\", \"title\" : \"".$this->name."\", \"value\" : \"".$this->value."\"}";
  }

  /** \brief Function returning a JSON template with all the field empty.
    *
    * \return The argument as a JSON string without any values in it.
  */
	public function getEmptyTemplate(){

		return "{\"content_type\" : \"after\", \"title\" : \"\", \"value\" : \"\"}";
	}
    
  /** \brief Function returning this argument to be written into the Rexify file.
    *
    * \return The argument as a string ready for rex.
  */
  public function toConfigFile(){

    return "'".$this->name."' => ".$this->toConfigFileArg().",";
  }

  /** \brief Function returning this argument to be written into the Rexify file.
    *
    * \return The argument as a string ready for rex.
  */
  public function toConfigFileArg(){

    return "'".$this->value."'";
  }

  /** \brief Function returning the name of the current argument
    *
    * \return The name of the current argument as a string.
  */
  public function getName(){return $this->name;}
  /**
   * \brief Function used to set the name of this argument
   * \warning This function don't do anything for now.
   * 
   * \param $name The name we want this parameter to have from now on, as a string.
   */
  public function setName($name){/*$this->name = $name;*/}

  /** \brief Function returning the value of the current argument
    *
    * \return The value of the current argument as a string.
  */
  public function getValue(){return $this->value;}
  /**
   * \brief Function used to set the value of this argument
   *
   * \param $value The value we want this parameter to have from now on, as a string.
   */
  public function setValue($value){$this->value = $value;}
}










/**
 * \brief Object used to specify a number argument.
 * 
 * Object used to specify an argument of a module or submodule
 * that is a number.
 */
class NumberArg extends Argument{

  private $value;

  /** \brief Constructor of the NumberArg object.
  *
  * \param $name The name of this argument (as a string).
  * \param $value The value of this argument (as a string).
  * \return The form input corresponding to this argument, as a string.
  */
  function __construct($name, $value){

      $this->type = "number";
      $this->name = $name;
      $this->value = $value;
  }
    
    
  /** \brief Function returning the current argument as an html form.
    *
    * \return The form input corresponding to this argument, as a string.
  */
  public function toForm(){
      
      return "<input type=\"text\" name=\"".$this->name."\" value=\"".$this->value."\" style=\"background-color:#82ff5d;\"/>";
  }

  /** \brief Function returning the current argument as JSON.
    *
    * \return The argument as a JSON string.
  */
	public function toJson(){

		return "{\"content_type\" : \"number\", \"title\" : \"".$this->name."\", \"value\" : \"".$this->value."\"}";
	}

  /** \brief Function returning a JSON template with all the field empty.
    *
    * \return The argument as a JSON string without any values in it.
  */
	public function getEmptyTemplate(){

		return "{\"content_type\" : \"number\", \"title\" : \"\", \"value\" : \"\"}";
	}
    
  /** \brief Function returning this argument to be written into the Rexify file.
    *
    * \return The argument as a string ready for rex.
  */
  public function toConfigFile(){

    return "'".$this->name."' => ".$this->toConfigFileArg().",";
  }

  /** \brief Function returning this argument to be written into the Rexify file.
    *
    * \return The argument as a string ready for rex.
  */
  public function toConfigFileArg(){

    return "'".$this->value."'";
  }

  /** \brief Function returning the name of the current argument
    *
    * \return The name of the current argument as a string.
  */
  public function getName(){return $this->name;}
  /**
   * \brief Function used to sed the name of this argument
   *
   * \param $name The name we want this parameter to have from now on, as a string.
   */
  public function setName($name){$this->name = $name;}
  /** \brief Function returning the value of the current argument
    *
    * \return The value of the current argument as a string.
  */
  public function getValue(){return $this->value;}
  /** \brief Function setting the value of the current argument
    *
    * \param $value The new value of the current argument as a string.
  */
  public function setValue($value){$this->value = $value;}
}










/**
 * \brief Object used to specify a bool argument.
 * 
 * Object used to specify an argument of a module or submodule
 * that is a bool.
 */
class BoolArg extends Argument{

  private $value;
  
  /** \brief Constructor of the BoolArg object.
  *
  * \param $name The name of this argument (as a string).
  * \param $value The value of this argument (as a string (true of false), or a number (0 or 1)).
  * \return The form input corresponding to this argument, as a string.
  */
  function __construct($name, $value){
  
    $this->type = "bool";
    $this->name = $name;

    $this->setValue($value);
  }
  
  
  /** \brief Function returning the current argument as an html form.
    *
    * \return The form input corresponding to this argument, as a string.
  */
  public function toForm(){
    
    $response = "<input type=\"hidden\" name=\"".$this->name."\" value=\"0\" /> <input type=\"checkbox\" name=\"".$this->name."\" value=\"1\"";           
    if($this->value){$response .= " checked";}
    $response .= "/>";

    return $response;
  }

  /** \brief Function returning the current argument as JSON.
    *
    * \return The argument as a JSON string.
  */
	public function toJson(){

		if($this->value) $response = "{\"content_type\" : \"bool\", \"title\" : \"".$this->name."\", \"value\" : true}";
		else $response = "{\"content_type\" : \"bool\", \"title\" : \"".$this->name."\", \"value\" : false}";

		return $response;
	}

  /** \brief Function returning a JSON template with all the field empty.
    *
    * \return The argument as a JSON string without any values in it.
  */
	public function getEmptyTemplate(){

		return "{\"content_type\" : \"bool\", \"title\" : \"\", \"value\" : \"\"}";
	}
    
  /** \brief Function returning this argument to be written into the Rexify file.
    *
    * \return The argument as a string ready for rex.
  */
  public function toConfigFile(){
      
      return "'".$this->name."' => ".$this->toConfigFileArg().",";
  }
  
  /** \brief Function returning this argument to be written into the Rexify file.
    *
    * \return The argument as a string ready for rex.
  */
  public function toConfigFileArg(){
      
      if($this->value){return "'1'";}
      else{return "'0'";}
  }
    
  /** \brief Function returning the name of the current argument
    *
    * \return The name of the current argument as a string.
  */
  public function getName(){return $this->name;}
  /**
   * \brief Function used to sed the name of this argument
   *
   * \param $name The name we want this parameter to have from now on, as a string.
   */
  public function setName($name){$this->name = $name;}

  /** \brief Function returning the value of the current argument
    *
    * \return The value of the current argument as a boolean.
  */
  public function getValue(){return $this->value;}
  /** \brief Function setting the value of the current argument
    *
  * \param $value The new value of this argument (as a string (true of false), or a number (0 or 1)).
  */
  public function setValue($value){

    if(is_string($value)){

      if($value === "false")$this->value = false;
      else $this->value = true;
    }else if(is_numeric($value)){

      if($value == 0)$this->value = false;
      else $this->value = true;
    }else{

      $this->value = false;
    }
	}
}










class ArrayArg extends Argument{

  private $subType;
  private $value;

  function __construct($name, $subType, $value){

    $this->type = "array";
    $this->name = $name;
    $this->subType = $subType;

    $this->value = $value;
  }


  /** \brief Function returning the current argument as an html form.
    *
    * \return The form input corresponding to this argument, as a string.
  */
  public function toForm(){

    $form = "";
    for($i=0; $i<count($this->value); $i++){

      $element = $this->value[$i];
      $form .= $element->toForm();
      $form .= "<input type=\"button\" class=\"removeElementFromArray\" name=\"remove_".$this->name."[".$i."]\" value=\"-\"/>";
    }

    $form .= "<input type=\"button\" class=\"addElementToArray\" name=\"".$this->name."\" value=\"+\"/>";

    return $form;
  }

  /** \brief Function returning the current argument as JSON.
    *
    * \return The argument as a JSON string.
  */
  public function toJson(){

    $emptyTemplate = $this->getEmptyTemplate();
    $emptyTemplate = str_replace ("\"", "\\\"", $emptyTemplate);

    $response = "{\"content_type\" : \"array\", \"title\" : \"".$this->name."\", \"subType\" : \"".$emptyTemplate."\", \"value\" : [";

    if(isset($this->value)){

      for($i=0; $i<count($this->value); $i++){

        $element = $this->value[$i];
        $response .= $element->toJson();
        $response .= ",";
      }
      $response = substr($response, 0, -1); //remove the last useless ","
    }

    $response .= "]}";

    return $response;
  }

  /** \brief Function returning a JSON template with all the field empty.
    *
    * \return The argument as a JSON string without any values in it.
  */
  public function getEmptyTemplate(){

    $template = $this->subType->getEmptyTemplate();

    return $template;
  }

  /** \brief Function returning this argument to be written into the Rexify file.
    *
    * \return The argument as a string ready for rex.
  */
  public function toConfigFile(){

    return "'".$this->name."' => ".$this->toConfigFileArg();
  }

  /** \brief Function returning this argument to be written into the Rexify file.
    *
    * \return The argument as a string ready for rex.
  */
  public function toConfigFileArg(){

    $response = "[";

    if(count($this->value)){	//if we have args in this array

      foreach($this->value as $element) $response .= $element->toConfigFileArg().", ";
      $response = substr($response, 0, -2);   //we remove the laste space and coma
    }
    $response .= "],";

    return $response;
  }

  public function createNewElement(){

    $name = $this->name."[".count($this->value)."]";
    $element = createObjectArgumentBasic($this->subType, [$name, ""]);
    $this->value[] = $element;

    return $element;
  }
  public function removeElementNum($num){

    unset($this->value[$num]);
  }

  /** \brief Function returning the name of the current argument
    *
    * \return The name of the current argument as a string.
  */
  public function getName(){return $this->name;}
  public function setName($name){$this->name = $name;}
  public function getSubType(){return $this->subType;}

  /** \brief Function returning the value of the current argument
    *
    * \return The value of the current argument as an array.
  */
  public function getValue(){return $this->value;}
  public function setValue($value){

    $array = [];
    for($i=0; $i<count($value); $i++){

      $array[] = createObjectArgumentBasic($value[$i]['content_type'], [$value[$i]['title'], $value[$i]['value']]);
    }

    $this->value = $array;
  }
}













class HashArg extends Argument{

  private $subType;
  private $value;


  private $hashDef;


  function __construct($name, $hashDefinition, $value){

    $this->type = "hash";
    $this->name = $name;
    $this->hashDef = $hashDefinition;
    $this->createHashValueObjects($hashDefinition, $value); 
    /*
    $firephp = FirePHP::getInstance(true);
    $firephp->log($this->value, 'hash');
    */
  }

  function createHashValueObjects($hashDefinition, $value){

    for($i = 0; $i<count($hashDefinition); $i=$i+2){

      $type = $hashDefinition[$i];
      $name = $hashDefinition[$i+1];

      if(isset($value[$name])) $this->value[$name] = $value[$name];
      else $this->value[$name] = createObjectArgumentBasic($type, [$name, NULL]);
    }
  }

  public function getArgTypeObject($name){

    if(isset($this->value[$name])) return $this->value[$name];
    else return NULL;
  }

  /** \brief Function returning the current argument as an html form.
  *
  * \return The form input corresponding to this argument, as a string.
  */
  public function toForm(){

    $form = "";

    foreach($this->value as $element){

      $form .= $element->getName()." : ".$element->toForm();            
    }

    return $form;
  }

  /** \brief Function returning the current argument as JSON.
    *
    * \return The argument as a JSON string.
  */
  public function toJson(){

    $response = "{\"content_type\" : \"hash\", \"title\" : \"".$this->name."\", \"value\" : {";

    foreach($this->value as $element){

      $response .= "\"".$element->getName()."\":".$element->toJson().",";            
    }

    $response = substr($response, 0, -1); //remove the last useless ","
    $response .= "}}";

    return $response;
  }

  /** \brief Function returning a JSON template with all the field empty.
    *
    * \return The argument as a JSON string without any values in it.
  */
  public function getEmptyTemplate(){

    return "dafuk";
  }

  /** \brief Function returning this argument to be written into the Rexify file.
    *
    * \return The argument as a string ready for rex.
  */
  public function toConfigFile(){

    return "'".$this->name."' => ".$this->toConfigFileArg();
  }

  /** \brief Function returning this argument to be written into the Rexify file.
    *
    * \return The argument as a string ready for rex.
  */
  public function toConfigFileArg(){

    $response = "{";

    if(count($this->value)){	//if we have args in this array

      foreach ($this->value as $subArgName => $subArgValue) {

        $element = $this->value[$subArgName];
        $response .= "'".$subArgName."' => ".$element->toConfigFileArg().", ";
      }
      $response = substr($response, 0, -2);   //we remove the laste space and coma
    }

    $response .= "},";

    return $response;
  }

  public function createNewElement(){

    /*$name = $this->name."[".count($this->value)."]";
    $element = createObjectArgumentBasic($this->subType, [$name, ""]);
    $this->value[] = $element;

    return $element;*/
  }
  public function removeElementNum($num){

    //unset($this->value[$num]);
  }

  /** \brief Function returning the name of the current argument
    *
    * \return The name of the current argument as a string.
  */
  public function getName(){return $this->name;}
  public function setName($name){$this->name = $name;}
  public function getSubType(){return $this->subType;}
	public function gethashDef(){return $this->hashDef;}

  /** \brief Function returning the value of the current argument
    *
    * \return The value of the current argument as an hash.
  */
  public function getValue(){return $this->value;}
  public function setValue($value){

		$array = [];
		foreach ($value as $subArgName => $subArgValue) {

			$subArgTitle = $value[$subArgName]['title'];
			$subArgValue = $value[$subArgName]['value'];

			$subArgObject = $this->getArgTypeObject($subArgTitle);

			$array[$subArgTitle] = createObjectArgumentFromString($subArgObject, [$subArgTitle, $subArgValue]);
    }

		$this->value = $array;
  }
}









function createObjectArgumentFromString($argObject, $string){
    
  $argName = $string[0];
  $argVal = $string[1];
  $type = $argObject->getType();


  if($type === "hash"){

    $subArray = array();
    foreach ($argVal as $subArgName => $subArgValue) {

      $typeSubArg = $argObject->getArgTypeObject($subArgName);

      $subArray[$subArgName] = createObjectArgumentFromString($typeSubArg, [$subArgName, $subArgValue]);
    }

    $hashDef = $argObject->gethashDef();
    $object = new HashArg($argName, $hashDef, $subArray);

    return $object;

  }elseif($type === "array"){

    $subType = $argObject->getSubType();
    $subArray = array();
    for($i=0; $i<count($argVal); $i++){

      $subElement = $argVal[$i];

      $stringArg[0] = "";
      $stringArg[1] = $subElement;

      $subArray[] = createObjectArgumentFromString($subType, $stringArg);
    }

    $object = new ArrayArg($argName, $subType, $subArray);
    return $object;

  }else{

    return createObjectArgumentBasic($type, $string);        
  }

  return NULL;
}











function createObjectArgumentBasic($type, $string){
    
  if($string == NULL) return NULL;
  $argName = $string[0];
  $argVal = $string[1];
          
  if($type === "string"){
      
    $object = new StringArg($argName, $argVal);
    return $object;
  }elseif($type === "after"){
    
    $object = new AfterArg($argVal);
    return $object;
  }elseif($type === "number"){
        
    $object = new NumberArg($argName, $argVal);
    return $object;
  }elseif($type === "bool"){
                
    $object = new BoolArg($argName, $argVal);
    return $object;
  }
  
  return NULL;
}



?>
