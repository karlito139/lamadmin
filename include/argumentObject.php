<?php
/*
 Copyright (C) 2013-2014 ClÃ©ment Roblot

This file is part of lamadmin.

Lamadmin is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Lamadmin is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Lamadmin.  If not, see <http://www.gnu.org/licenses/>.
*/

require_once("FirePHPCore/FirePHP.class.php");





/** \brief All the arguments usable in the modules and submodules are inheriting from this class.
  *
  * This object is abstract, it will never be instanciated as such.
  */
abstract class Argument{

  protected $type;  /**< The type of this argument */
  protected $name;  /**< The name of this argument */

  /** \brief Function returning the current argument as an html form.
    *
    * \return The form input corresponding to this argument, as a string.
  */
  abstract protected function toForm();

  /** \brief Function returning the current argument as JSON.
    *
    * \return The argument as a JSON string.
  */
  abstract protected function toJson();

  /** \brief Function returning a JSON template with all the field empty.
    *
    * \return The argument as a JSON string without any values in it.
  */
  abstract protected function getEmptyTemplate();

  /** \brief Function returning this argument to be written into the Rexify file.
    *
    * \return The argument as a string ready for rex.
  */
  abstract protected function toConfigFile();

  /** \brief Function returning this argument to be written into the Rexify file.
    *
    * \return The argument as a string ready for rex.
  */
  abstract protected function toConfigFileArg();

  /** \brief Function returning this argument value to be written into the Rexify file (called by toConfigFile).
    *
    * \return The argument value as a string ready to be included into the argument string for rex (generated by the function toConfigFile).
  */
  public function getType(){return $this->type;}


  /** \brief Function returning the name of the current argument
    *
    * \return The name of the current argument as a string.
  */
  public function getName(){return $this->name;}
}











/**
 * \brief Object used to specify a string argument.
 * 
 * Object used to specify an argument of a module or submodule
 * that is a string.
 */
class StringArg extends Argument{

  private $value;
  
  /** \brief Constructor of the StringArg object.
    *
    * \param $name The name of this argument (as a string).
    * \param $value The value of this argument (as a string).
  */
  function __construct($name, $value){
  
    $this->type = "string";
    $this->name = $name;
    $this->value = $value;
  }
  
  /** \brief Function returning the current argument as an html form.
    *
    * \return The form input corresponding to this argument, as a string.
  */
  public function toForm(){
      
    return "<input type=\"text\" name=\"".$this->name."\" value=\"".$this->value."\"/>";
  }

  /** \brief Function returning the current argument as JSON.
    *
    * \return The argument as a JSON string.
  */
	public function toJson(){

		return "{\"content_type\" : \"string\", \"title\" : \"".$this->name."\", \"value\" : \"".$this->value."\"}";
	}
    
  /** \brief Function returning a JSON template with all the field empty.
    *
    * \return The argument as a JSON string without any values in it.
  */
	public function getEmptyTemplate(){

		return "{\"content_type\" : \"string\", \"title\" : \"\", \"value\" : \"\"}";
	}

  /** \brief Function returning this argument to be written into the Rexify file.
    *
    * \return The argument as a string ready for rex.
  */
  public function toConfigFile(){
      
    return "'".$this->name."' => ".$this->toConfigFileArg().",";
  }
  
  /** \brief Function returning this argument to be written into the Rexify file.
    *
    * \return The argument as a string ready for rex.
  */
  public function toConfigFileArg(){
      
    return "'".$this->value."'";
  }
  
  /** \brief Function returning the name of the current argument
    *
    * \return The name of the current argument as a string.
  */
  public function getName(){return $this->name;}
  /** \brief Function setting the name of the current argument
    *
    * \param $name The new name of the current argument as a string.
  */
  public function setName($name){$this->name = $name;}
  /** \brief Function returning the value of the current argument
    *
    * \return The value of the current argument as a string.
  */
  public function getValue(){return $this->value;}
  /** \brief Function setting the value of the current argument
    *
    * \param $value The new value of the current argument as a string.
  */
  public function setValue($value){$this->value = $value;}
}










/**
 * \brief Object used to specify order between instances of modules and submodules.
 * 
 * Object used to specify the fact that a module or submodule must be instanciated after an other.
 * This argument should be usable with every modules and submodules without having to specify it 
 * in it's configuration file
 */
class AfterArg extends Argument{

  private $value;
  
  /** \brief Contructor of the object.
    *
    * \param $value The object after wich we want to be, as a string.
  */
  function __construct($value){
  
    $this->type = "after";
    $this->name = "after";
    $this->value = $value;
  }
  
  
  /** \brief Function returning the current argument as an html form.
    *
    * \return The form input corresponding to this argument, as a string.
  */
  public function toForm(){
      
    return "<input type=\"text\" class=\"instanceMenu\" name=\"".$this->name."\" value=\"".$this->value."\"/>";
  }

  /** \brief Function returning the current argument as JSON.
    *
    * \return The argument as a JSON string.
  */
  public function toJson(){

    return "{\"content_type\" : \"after\", \"title\" : \"".$this->name."\", \"value\" : \"".$this->value."\"}";
  }

  /** \brief Function returning a JSON template with all the field empty.
    *
    * \return The argument as a JSON string without any values in it.
  */
	public function getEmptyTemplate(){

		return "{\"content_type\" : \"after\", \"title\" : \"\", \"value\" : \"\"}";
	}
    
  /** \brief Function returning this argument to be written into the Rexify file.
    *
    * \return The argument as a string ready for rex.
  */
  public function toConfigFile(){

    return "'".$this->name."' => ".$this->toConfigFileArg().",";
  }

  /** \brief Function returning this argument to be written into the Rexify file.
    *
    * \return The argument as a string ready for rex.
  */
  public function toConfigFileArg(){

    return "'".$this->value."'";
  }

  /** \brief Function returning the name of the current argument
    *
    * \return The name of the current argument as a string.
  */
  public function getName(){return $this->name;}
  /**
   * \brief Function used to set the name of this argument
   * \warning This function don't do anything for now.
   * 
   * \param $name The name we want this parameter to have from now on, as a string.
   */
  public function setName($name){/*$this->name = $name;*/}

  /** \brief Function returning the value of the current argument
    *
    * \return The value of the current argument as a string.
  */
  public function getValue(){return $this->value;}
  /**
   * \brief Function used to set the value of this argument
   *
   * \param $value The value we want this parameter to have from now on, as a string.
   */
  public function setValue($value){$this->value = $value;}
}










/**
 * \brief Object used to specify a number argument.
 * 
 * Object used to specify an argument of a module or submodule
 * that is a number.
 */
class NumberArg extends Argument{

  private $value;

  /** \brief Constructor of the NumberArg object.
  *
  * \param $name The name of this argument (as a string).
  * \param $value The value of this argument (as a string).
  */
  function __construct($name, $value){

      $this->type = "number";
      $this->name = $name;
      $this->value = $value;
  }
    
    
  /** \brief Function returning the current argument as an html form.
    *
    * \return The form input corresponding to this argument, as a string.
  */
  public function toForm(){
      
      return "<input type=\"text\" name=\"".$this->name."\" value=\"".$this->value."\" style=\"background-color:#82ff5d;\"/>";
  }

  /** \brief Function returning the current argument as JSON.
    *
    * \return The argument as a JSON string.
  */
	public function toJson(){

		return "{\"content_type\" : \"number\", \"title\" : \"".$this->name."\", \"value\" : \"".$this->value."\"}";
	}

  /** \brief Function returning a JSON template with all the field empty.
    *
    * \return The argument as a JSON string without any values in it.
  */
	public function getEmptyTemplate(){

		return "{\"content_type\" : \"number\", \"title\" : \"\", \"value\" : \"\"}";
	}
    
  /** \brief Function returning this argument to be written into the Rexify file.
    *
    * \return The argument as a string ready for rex.
  */
  public function toConfigFile(){

    return "'".$this->name."' => ".$this->toConfigFileArg().",";
  }

  /** \brief Function returning this argument to be written into the Rexify file.
    *
    * \return The argument as a string ready for rex.
  */
  public function toConfigFileArg(){

    return "'".$this->value."'";
  }

  /** \brief Function returning the name of the current argument
    *
    * \return The name of the current argument as a string.
  */
  public function getName(){return $this->name;}
  /**
   * \brief Function used to sed the name of this argument
   *
   * \param $name The name we want this parameter to have from now on, as a string.
   */
  public function setName($name){$this->name = $name;}
  /** \brief Function returning the value of the current argument
    *
    * \return The value of the current argument as a string.
  */
  public function getValue(){return $this->value;}
  /** \brief Function setting the value of the current argument
    *
    * \param $value The new value of the current argument as a string.
  */
  public function setValue($value){$this->value = $value;}
}










/**
 * \brief Object used to specify a bool argument.
 * 
 * Object used to specify an argument of a module or submodule
 * that is a bool.
 */
class BoolArg extends Argument{

  private $value;
  
  /** \brief Constructor of the BoolArg object.
  *
  * \param $name The name of this argument (as a string).
  * \param $value The value of this argument (as a string (true of false), or a number (0 or 1)).
  */
  function __construct($name, $value){
  
    $this->type = "bool";
    $this->name = $name;

    $this->setValue($value);
  }
  
  
  /** \brief Function returning the current argument as an html form.
    *
    * \return The form input corresponding to this argument, as a string.
  */
  public function toForm(){
    
    $response = "<input type=\"hidden\" name=\"".$this->name."\" value=\"0\" /> <input type=\"checkbox\" name=\"".$this->name."\" value=\"1\"";           
    if($this->value){$response .= " checked";}
    $response .= "/>";

    return $response;
  }

  /** \brief Function returning the current argument as JSON.
    *
    * \return The argument as a JSON string.
  */
	public function toJson(){

		if($this->value) $response = "{\"content_type\" : \"bool\", \"title\" : \"".$this->name."\", \"value\" : true}";
		else $response = "{\"content_type\" : \"bool\", \"title\" : \"".$this->name."\", \"value\" : false}";

		return $response;
	}

  /** \brief Function returning a JSON template with all the field empty.
    *
    * \return The argument as a JSON string without any values in it.
  */
	public function getEmptyTemplate(){

		return "{\"content_type\" : \"bool\", \"title\" : \"\", \"value\" : \"\"}";
	}
    
  /** \brief Function returning this argument to be written into the Rexify file.
    *
    * \return The argument as a string ready for rex.
  */
  public function toConfigFile(){
      
      return "'".$this->name."' => ".$this->toConfigFileArg().",";
  }
  
  /** \brief Function returning this argument to be written into the Rexify file.
    *
    * \return The argument as a string ready for rex.
  */
  public function toConfigFileArg(){
      
      if($this->value){return "'1'";}
      else{return "'0'";}
  }
    
  /** \brief Function returning the name of the current argument
    *
    * \return The name of the current argument as a string.
  */
  public function getName(){return $this->name;}
  /**
   * \brief Function used to sed the name of this argument
   *
   * \param $name The name we want this parameter to have from now on, as a string.
   */
  public function setName($name){$this->name = $name;}

  /** \brief Function returning the value of the current argument
    *
    * \return The value of the current argument as a boolean.
  */
  public function getValue(){return $this->value;}
  /** \brief Function setting the value of the current argument
    *
  * \param $value The new value of this argument (as a string (true of false), or a number (0 or 1)).
  */
  public function setValue($value){

    if(is_string($value)){

      if($value === "false")$this->value = false;
      else $this->value = true;
    }else if(is_numeric($value)){

      if($value == 0)$this->value = false;
      else $this->value = true;
    }else{

      $this->value = false;
    }
	}
}









/**
 * \brief Object used to specify an array of arguments.
 * 
 * Object used to specify an argument of a module or submodule
 * that is an array of arguments (all of the same type).
 */
class ArrayArg extends Argument{

  private $subType;
  private $value;

  /** \brief Constructor of the ArrayArg object.
  *
  * \todo We don't need the $subType argument, we can just read it from the $value.
  *
  * \param $name The name of this argument (as a string).
  * \param $subType The type of the argument stored into this array (as a string)
  * \param $value The value of this argument (an array of arguments of the $subType).
  */
  function __construct($name, $subType, $value){

    $this->type = "array";
    $this->name = $name;
    $this->subType = $subType;

    $this->value = $value;
  }


  /** \brief Function returning the current argument as an html form.
    *
    * \return The form input corresponding to this argument, as a string.
  */
  public function toForm(){

    $form = "";
    for($i=0; $i<count($this->value); $i++){

      $element = $this->value[$i];
      $form .= $element->toForm();
      $form .= "<input type=\"button\" class=\"removeElementFromArray\" name=\"remove_".$this->name."[".$i."]\" value=\"-\"/>";
    }

    $form .= "<input type=\"button\" class=\"addElementToArray\" name=\"".$this->name."\" value=\"+\"/>";

    return $form;
  }

  /** \brief Function returning the current argument as JSON.
    *
    * \return The argument as a JSON string.
  */
  public function toJson(){

    $emptyTemplate = $this->getEmptyTemplate();
    $emptyTemplate = str_replace ("\"", "\\\"", $emptyTemplate);

    $response = "{\"content_type\" : \"array\", \"title\" : \"".$this->name."\", \"subType\" : \"".$emptyTemplate."\", \"value\" : [";

    if(isset($this->value)){

      for($i=0; $i<count($this->value); $i++){

        $element = $this->value[$i];
        $response .= $element->toJson();
        $response .= ",";
      }
      $response = substr($response, 0, -1); //remove the last useless ","
    }

    $response .= "]}";

    return $response;
  }

  /** \brief Function returning a JSON template with all the field empty.
    *
    * \return The argument as a JSON string without any values in it.
  */
  public function getEmptyTemplate(){

    $template = $this->subType->getEmptyTemplate();

    return $template;
  }

  /** \brief Function returning this argument to be written into the Rexify file.
    *
    * \return The argument as a string ready for rex.
  */
  public function toConfigFile(){

    return "'".$this->name."' => ".$this->toConfigFileArg();
  }

  /** \brief Function returning this argument to be written into the Rexify file.
    *
    * \return The argument as a string ready for rex.
  */
  public function toConfigFileArg(){

    $response = "[";

    if(count($this->value)){	//if we have args in this array

      foreach($this->value as $element) $response .= $element->toConfigFileArg().", ";
      $response = substr($response, 0, -2);   //we remove the laste space and coma
    }
    $response .= "],";

    return $response;
  }

  /** \brief Function creating a new argument.
    *
    * This function creates a new arguments and adds it to this array.
    *
    * \return The argument that have just been created.
  */
  public function createNewElement(){

    $name = $this->name."[".count($this->value)."]";
    $element = createObjectArgumentBasic($this->subType, [$name, ""]);
    $this->value[] = $element;

    return $element;
  }

  /** \brief Function removing an argument of the array.
    *
    * \param $num The number of the argument in the array that have to be deleted.
  */
  public function removeElementNum($num){

    unset($this->value[$num]);
  }

  /** \brief Function returning the name of the current argument
    *
    * \return The name of the current argument as a string.
  */
  public function getName(){return $this->name;}
  /**
   * \brief Function used to sed the name of this argument
   *
   * \param $name The name we want this parameter to have from now on, as a string.
   */
  public function setName($name){$this->name = $name;}
  /** \brief Function returning the subType of the arguments stored in this array
    *
    * \return The subType of the arguments stored in this array.
  */
  public function getSubType(){return $this->subType;}

  /** \brief Function returning the value of the current argument
    *
    * \return The value of the current argument as an array.
  */
  public function getValue(){return $this->value;}
  /** \brief Function setting the value of the current array of arguments
    *
    * For more information this methode is just calling recusivly the function createObjectArgumentBasic
    *
  * \param $value The new value of this argument (as an array of hash containing the three values : 'content_type', 'title', 'value' as strings).
  */
  public function setValue($value){

    $array = [];
    for($i=0; $i<count($value); $i++){

      $array[] = createObjectArgumentBasic($value[$i]['content_type'], [$value[$i]['title'], $value[$i]['value']]);
    }

    $this->value = $array;
  }
}












/**
 * \brief Object used to specify an hash of arguments.
 * 
 * Object used to specify an argument of a module or submodule
 * that is an hash of arguments.
 */
class HashArg extends Argument{

  private $subType;
  private $value;

  private $hashDef;

  /** \brief Constructor of the HashArg object.
  *
  * \todo Make that object a little better (hashDefinition as a 2D array)
  *
  * \param $name The name of this argument (as a string).
  * \param $hashDefinition The description of the has (as an array containing the type of the arg then it's name, then the type of the second argument then the name of the second argument..).
  * \param $value The value of this argument (an array of arguments in the order of the hashDefinition).
  */
  function __construct($name, $hashDefinition, $value){

    $this->type = "hash";
    $this->name = $name;
    $this->hashDef = $hashDefinition;
    $this->createHashValueObjects($hashDefinition, $value); 
    /*
    $firephp = FirePHP::getInstance(true);
    $firephp->log($this->value, 'hash');
    */
  }

  /** \brief Fills out the arguments of this hash with the values we get into the constructor.
  *
  * This function is called by the constructor to fill the arguments of the object.
  *
  * \param $hashDefinition The description of the has (as an array containing the type of the arg then it's name, then the type of the second argument then the name of the second argument..).
  * \param $value The value of this argument (an array of arguments in the order of the hashDefinition).
  */
  function createHashValueObjects($hashDefinition, $value){

    for($i = 0; $i<count($hashDefinition); $i=$i+2){

      $type = $hashDefinition[$i];
      $name = $hashDefinition[$i+1];

      if(isset($value[$name])) $this->value[$name] = $value[$name];
      else $this->value[$name] = createObjectArgumentBasic($type, [$name, NULL]);
    }
  }

  /** \brief Function that get the argument we are searching for.
  *
  * \todo rename this function to something more sutable like getArgByName
  *
  * \param $name The name of the argument in this hash we want to retriev.
  */
  public function getArgTypeObject($name){

    if(isset($this->value[$name])) return $this->value[$name];
    else return NULL;
  }

  /** \brief Function returning the current argument as an html form.
  *
  * \return The form input corresponding to this argument, as a string.
  */
  public function toForm(){

    $form = "";

    foreach($this->value as $element){

      $form .= $element->getName()." : ".$element->toForm();            
    }

    return $form;
  }

  /** \brief Function returning the current argument as JSON.
    *
    * \return The argument as a JSON string.
  */
  public function toJson(){

    $response = "{\"content_type\" : \"hash\", \"title\" : \"".$this->name."\", \"value\" : {";

    foreach($this->value as $element){

      $response .= "\"".$element->getName()."\":".$element->toJson().",";            
    }

    $response = substr($response, 0, -1); //remove the last useless ","
    $response .= "}}";

    return $response;
  }

  /** \brief Function returning a JSON template with all the field empty.
    *
    * \warning This function is not implemented
    *
    * \return The argument as a JSON string without any values in it.
  */
  public function getEmptyTemplate(){

    return "dafuk";
  }

  /** \brief Function returning this argument to be written into the Rexify file.
    *
    * \return The argument as a string ready for rex.
  */
  public function toConfigFile(){

    return "'".$this->name."' => ".$this->toConfigFileArg();
  }

  /** \brief Function returning this argument to be written into the Rexify file.
    *
    * \return The argument as a string ready for rex.
  */
  public function toConfigFileArg(){

    $response = "{";

    if(count($this->value)){	//if we have args in this array

      foreach ($this->value as $subArgName => $subArgValue) {

        $element = $this->value[$subArgName];
        $response .= "'".$subArgName."' => ".$element->toConfigFileArg().", ";
      }
      $response = substr($response, 0, -2);   //we remove the laste space and coma
    }

    $response .= "},";

    return $response;
  }

  /** \brief Function creating a new argument.
    *
    * \warning this function os not implemented
    * \todo I don't think this function makes any sens in the hash arg. Migth need to be removed.
    *
    * This function creates a new arguments and adds it to this array.
    *
    * \return The argument that have just been created.
  */
  public function createNewElement(){

    /*$name = $this->name."[".count($this->value)."]";
    $element = createObjectArgumentBasic($this->subType, [$name, ""]);
    $this->value[] = $element;

    return $element;*/
  }
  /** \brief Function removing an argument of the array.
    *
    * \warning Function not implemented.
    * \todo I don't think this function makes any sens in the hash arg. Migth need to be removed.
    *
    * \param $num The number of the argument in the array that have to be deleted.
  */
  public function removeElementNum($num){

    //unset($this->value[$num]);
  }

  /** \brief Function returning the name of the current argument
    *
    * \return The name of the current argument as a string.
  */
  public function getName(){return $this->name;}
  /**
   * \brief Function used to set the name of this argument
   *
   * \param $name The name we want this parameter to have from now on, as a string.
   */
  public function setName($name){$this->name = $name;}
  /** \brief Function returning the subType of the arguments stored in this hash
    *
    * \todo I don't think this function makes any sens in the hash arg. Migth need to be removed.
    * \return The subType of the arguments stored in this hash.
  */
  public function getSubType(){return $this->subType;}
  /** \brief Function returning the hashDefinition of the arguments stored in this hash
    *
    * See the constructor of this object for more info on what is the hashDefinition
    *
    * \return The hashDefinition of this hash.
  */
	public function gethashDef(){return $this->hashDef;}

  /** \brief Function returning the value of the current argument
    *
    * \return The value of the current argument as an hash.
  */
  public function getValue(){return $this->value;}

  /** \brief Fills out the arguments of this hash with the values we pass it..
  *
  * \todo This function migth be useless considering we already got createHashValueObjects.
  *
  * \param $value The value of this argument (an array of arguments in the order of the hashDefinition).
  */
  public function setValue($value){

		$array = [];
		foreach ($value as $subArgName => $subArgValue) {

			$subArgTitle = $value[$subArgName]['title'];
			$subArgValue = $value[$subArgName]['value'];

			$subArgObject = $this->getArgTypeObject($subArgTitle);

			$array[$subArgTitle] = createObjectArgumentFromString($subArgObject, [$subArgTitle, $subArgValue]);
    }

		$this->value = $array;
  }
}








/** \brief Function that is going to create an argument object from it string declaration
*
* \param $argObject An empty object of the type of the one we want to create
* \param $string An array of 2 strings : the name of the argument, then it's value.
*/
function createObjectArgumentFromString($argObject, $string){
    
  $argName = $string[0];
  $argVal = $string[1];
  $type = $argObject->getType();


  if($type === "hash"){

    $subArray = array();
    foreach ($argVal as $subArgName => $subArgValue) {

      $typeSubArg = $argObject->getArgTypeObject($subArgName);

      $subArray[$subArgName] = createObjectArgumentFromString($typeSubArg, [$subArgName, $subArgValue]);
    }

    $hashDef = $argObject->gethashDef();
    $object = new HashArg($argName, $hashDef, $subArray);

    return $object;

  }elseif($type === "array"){

    $subType = $argObject->getSubType();
    $subArray = array();
    for($i=0; $i<count($argVal); $i++){

      $subElement = $argVal[$i];

      $stringArg[0] = "";
      $stringArg[1] = $subElement;

      $subArray[] = createObjectArgumentFromString($subType, $stringArg);
    }

    $object = new ArrayArg($argName, $subType, $subArray);
    return $object;

  }else{

    return createObjectArgumentBasic($type, $string);        
  }

  return NULL;
}









/** \brief Function that is going to create an argument object from it string declaration.
*
* \warning Don't use this function directly. Il will only create basic arguements (no arrays nor hash). 
* Prefer using createObjectArgumentFromString who is going to call this function if needed.
*
* \param $type The type of the argument to create (as a string).
* \param $string The value of the argument (as a string).
*/
function createObjectArgumentBasic($type, $string){
    
  if($string == NULL) return NULL;
  $argName = $string[0];
  $argVal = $string[1];
          
  if($type === "string"){
      
    $object = new StringArg($argName, $argVal);
    return $object;
  }elseif($type === "after"){
    
    $object = new AfterArg($argVal);
    return $object;
  }elseif($type === "number"){
        
    $object = new NumberArg($argName, $argVal);
    return $object;
  }elseif($type === "bool"){
                
    $object = new BoolArg($argName, $argVal);
    return $object;
  }
  
  return NULL;
}



?>
